// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

public final class BanqueImplement_Stub
    extends java.rmi.server.RemoteStub
    implements BanqueInterface, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_deposer_0;
    private static java.lang.reflect.Method $method_fermerCompte_1;
    private static java.lang.reflect.Method $method_getCompte_2;
    private static java.lang.reflect.Method $method_ouvrirCompte_3;
    private static java.lang.reflect.Method $method_retirer_4;
    private static java.lang.reflect.Method $method_solde_5;
    private static java.lang.reflect.Method $method_verifie_6;
    
    static {
	try {
	    $method_deposer_0 = BanqueInterface.class.getMethod("deposer", new java.lang.Class[] {int.class, Compte.class});
	    $method_fermerCompte_1 = BanqueInterface.class.getMethod("fermerCompte", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_getCompte_2 = BanqueInterface.class.getMethod("getCompte", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_ouvrirCompte_3 = BanqueInterface.class.getMethod("ouvrirCompte", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_retirer_4 = BanqueInterface.class.getMethod("retirer", new java.lang.Class[] {int.class, Compte.class});
	    $method_solde_5 = BanqueInterface.class.getMethod("solde", new java.lang.Class[] {Compte.class});
	    $method_verifie_6 = BanqueInterface.class.getMethod("verifie", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public BanqueImplement_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of deposer(int, Compte)
    public void deposer(int $param_int_1, Compte $param_Compte_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_deposer_0, new java.lang.Object[] {new java.lang.Integer($param_int_1), $param_Compte_2}, -8560487563989147770L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fermerCompte(String, String)
    public int fermerCompte(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_fermerCompte_1, new java.lang.Object[] {$param_String_1, $param_String_2}, -4705682192402169807L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getCompte(String, String)
    public Compte getCompte(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getCompte_2, new java.lang.Object[] {$param_String_1, $param_String_2}, -1427623866672643054L);
	    return ((Compte) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of ouvrirCompte(String, String)
    public void ouvrirCompte(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_ouvrirCompte_3, new java.lang.Object[] {$param_String_1, $param_String_2}, 6592248647950825976L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of retirer(int, Compte)
    public void retirer(int $param_int_1, Compte $param_Compte_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_retirer_4, new java.lang.Object[] {new java.lang.Integer($param_int_1), $param_Compte_2}, 5263069150495315669L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of solde(Compte)
    public int solde(Compte $param_Compte_1)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_solde_5, new java.lang.Object[] {$param_Compte_1}, -4086982306262384768L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of verifie(String, String)
    public Compte verifie(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_verifie_6, new java.lang.Object[] {$param_String_1, $param_String_2}, 4438100986884117828L);
	    return ((Compte) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
